// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: hello.proto

package hello

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloToWhoClient is the client API for HelloToWho service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloToWhoClient interface {
	// 一般
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// server端stream
	HelloServerStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloToWho_HelloServerStreamClient, error)
	// client端stream
	HelloClientStream(ctx context.Context, opts ...grpc.CallOption) (HelloToWho_HelloClientStreamClient, error)
	// 雙向stream
	HelloAllStream(ctx context.Context, opts ...grpc.CallOption) (HelloToWho_HelloAllStreamClient, error)
}

type helloToWhoClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloToWhoClient(cc grpc.ClientConnInterface) HelloToWhoClient {
	return &helloToWhoClient{cc}
}

func (c *helloToWhoClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/hello.HelloToWho/hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloToWhoClient) HelloServerStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloToWho_HelloServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloToWho_ServiceDesc.Streams[0], "/hello.HelloToWho/helloServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloToWhoHelloServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloToWho_HelloServerStreamClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloToWhoHelloServerStreamClient struct {
	grpc.ClientStream
}

func (x *helloToWhoHelloServerStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloToWhoClient) HelloClientStream(ctx context.Context, opts ...grpc.CallOption) (HelloToWho_HelloClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloToWho_ServiceDesc.Streams[1], "/hello.HelloToWho/helloClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloToWhoHelloClientStreamClient{stream}
	return x, nil
}

type HelloToWho_HelloClientStreamClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloToWhoHelloClientStreamClient struct {
	grpc.ClientStream
}

func (x *helloToWhoHelloClientStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloToWhoHelloClientStreamClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloToWhoClient) HelloAllStream(ctx context.Context, opts ...grpc.CallOption) (HelloToWho_HelloAllStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloToWho_ServiceDesc.Streams[2], "/hello.HelloToWho/helloAllStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloToWhoHelloAllStreamClient{stream}
	return x, nil
}

type HelloToWho_HelloAllStreamClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloToWhoHelloAllStreamClient struct {
	grpc.ClientStream
}

func (x *helloToWhoHelloAllStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloToWhoHelloAllStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloToWhoServer is the server API for HelloToWho service.
// All implementations must embed UnimplementedHelloToWhoServer
// for forward compatibility
type HelloToWhoServer interface {
	// 一般
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	// server端stream
	HelloServerStream(*HelloRequest, HelloToWho_HelloServerStreamServer) error
	// client端stream
	HelloClientStream(HelloToWho_HelloClientStreamServer) error
	// 雙向stream
	HelloAllStream(HelloToWho_HelloAllStreamServer) error
	mustEmbedUnimplementedHelloToWhoServer()
}

// UnimplementedHelloToWhoServer must be embedded to have forward compatible implementations.
type UnimplementedHelloToWhoServer struct {
}

func (UnimplementedHelloToWhoServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedHelloToWhoServer) HelloServerStream(*HelloRequest, HelloToWho_HelloServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloServerStream not implemented")
}
func (UnimplementedHelloToWhoServer) HelloClientStream(HelloToWho_HelloClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloClientStream not implemented")
}
func (UnimplementedHelloToWhoServer) HelloAllStream(HelloToWho_HelloAllStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloAllStream not implemented")
}
func (UnimplementedHelloToWhoServer) mustEmbedUnimplementedHelloToWhoServer() {}

// UnsafeHelloToWhoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloToWhoServer will
// result in compilation errors.
type UnsafeHelloToWhoServer interface {
	mustEmbedUnimplementedHelloToWhoServer()
}

func RegisterHelloToWhoServer(s grpc.ServiceRegistrar, srv HelloToWhoServer) {
	s.RegisterService(&HelloToWho_ServiceDesc, srv)
}

func _HelloToWho_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloToWhoServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.HelloToWho/hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloToWhoServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloToWho_HelloServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloToWhoServer).HelloServerStream(m, &helloToWhoHelloServerStreamServer{stream})
}

type HelloToWho_HelloServerStreamServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type helloToWhoHelloServerStreamServer struct {
	grpc.ServerStream
}

func (x *helloToWhoHelloServerStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloToWho_HelloClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloToWhoServer).HelloClientStream(&helloToWhoHelloClientStreamServer{stream})
}

type HelloToWho_HelloClientStreamServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloToWhoHelloClientStreamServer struct {
	grpc.ServerStream
}

func (x *helloToWhoHelloClientStreamServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloToWhoHelloClientStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloToWho_HelloAllStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloToWhoServer).HelloAllStream(&helloToWhoHelloAllStreamServer{stream})
}

type HelloToWho_HelloAllStreamServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloToWhoHelloAllStreamServer struct {
	grpc.ServerStream
}

func (x *helloToWhoHelloAllStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloToWhoHelloAllStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloToWho_ServiceDesc is the grpc.ServiceDesc for HelloToWho service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloToWho_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello.HelloToWho",
	HandlerType: (*HelloToWhoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "hello",
			Handler:    _HelloToWho_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "helloServerStream",
			Handler:       _HelloToWho_HelloServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "helloClientStream",
			Handler:       _HelloToWho_HelloClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "helloAllStream",
			Handler:       _HelloToWho_HelloAllStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello.proto",
}
